{"ast":null,"code":"var _jsxFileName = \"/Users/prerak/Developer/Git/GeetHub Main/editor/src/components/AudioWaveform.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext, useRef } from 'react';\nimport TimelinePlugin from 'wavesurfer.js/dist/plugin/wavesurfer.timeline.min.js';\nimport RegionsPlugin from 'wavesurfer.js/dist/plugin/wavesurfer.regions.min.js';\nimport { FileContext } from '../contexts/fileContext';\nimport wavesurfer from 'wavesurfer.js';\nimport ToggleButton from './ToggleButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioWaveform = () => {\n  _s();\n\n  const wavesurferRef = useRef(null);\n  const timelineRef = useRef(null); // fetch file url from the context\n\n  const {\n    fileURL,\n    setFileURL\n  } = useContext(FileContext); // crate an instance of the wavesurfer\n\n  const [wavesurferObj, setWavesurferObj] = useState();\n  const [playing, setPlaying] = useState(true); // to keep track whether audio is currently playing or not\n\n  const [volume, setVolume] = useState(1); // to control volume level of the audio. 0-mute, 1-max\n\n  const [zoom, setZoom] = useState(1); // to control the zoom level of the waveform\n\n  const [duration, setDuration] = useState(0); // duration is used to set the default region of selection for trimming the audio\n  // create the waveform inside the correct component\n\n  useEffect(() => {\n    if (wavesurferRef.current && !wavesurferObj) {\n      setWavesurferObj(wavesurfer.create({\n        container: '#waveform',\n        scrollParent: true,\n        autoCenter: true,\n        barWidth: 2,\n        cursorColor: 'navy-blue',\n        loopSelection: true,\n        waveColor: '#C3E0E5',\n        progressColor: '#274472',\n        responsive: true,\n        plugins: [TimelinePlugin.create({\n          container: '#wave-timeline'\n        }), RegionsPlugin.create({})]\n      }));\n    }\n  }, [wavesurferRef, wavesurferObj]); // once the file URL is ready, load the file to produce the waveform\n\n  useEffect(() => {\n    if (fileURL && wavesurferObj) {\n      wavesurferObj.load(fileURL);\n    }\n  }, [fileURL, wavesurferObj]);\n  useEffect(() => {\n    if (wavesurferObj) {\n      // once the waveform is ready, play the audio\n      wavesurferObj.on('ready', () => {\n        wavesurferObj.play();\n        wavesurferObj.enableDragSelection({}); // to select the region to be trimmed\n\n        setDuration(Math.floor(wavesurferObj.getDuration())); // set the duration in local state\n      }); // once audio starts playing, set the state variable to true\n\n      wavesurferObj.on('play', () => {\n        setPlaying(true);\n      }); // once audio starts playing, set the state variable to false\n\n      wavesurferObj.on('finish', () => {\n        setPlaying(false);\n      }); // if multiple regions are created, then remove all the previous regions so that only 1 is present at any given time\n\n      wavesurferObj.on('region-updated', region => {\n        const regions = region.wavesurfer.regions.list;\n        const keys = Object.keys(regions);\n\n        if (keys.length > 1) {\n          regions[keys[0]].remove();\n        }\n      });\n    }\n  }, [wavesurferObj]); // set volume of the wavesurfer object, whenever volume variable in state is changed\n\n  useEffect(() => {\n    if (wavesurferObj) wavesurferObj.setVolume(volume);\n  }, [volume, wavesurferObj]); // set zoom level of the wavesurfer object, whenever the zoom variable in state is changed\n\n  useEffect(() => {\n    if (wavesurferObj) wavesurferObj.zoom(zoom);\n  }, [zoom, wavesurferObj]); // when the duration of the audio is available, set the length of the region depending on it, so as to not exceed the total lenght of the audio\n\n  useEffect(() => {\n    if (duration && wavesurferObj) {\n      // add a region with default length\n      wavesurferObj.addRegion({\n        start: Math.floor(duration / 2) - Math.floor(duration) / 5,\n        // time in seconds\n        end: Math.floor(duration / 2),\n        // time in seconds\n        color: 'hsla(217, 49%, 30%, 0.4)' // color of the selected region\n\n      });\n    }\n  }, [duration, wavesurferObj]);\n\n  const handlePlayPause = e => {\n    wavesurferObj.playPause();\n    setPlaying(!playing);\n  };\n\n  const handleReload = e => {\n    // stop will return the audio to 0s, then play it again\n    wavesurferObj.stop();\n    wavesurferObj.play();\n    setPlaying(true); // to toggle the play/pause button icon\n  };\n\n  const handleVolumeSlider = e => {\n    setVolume(e.target.value);\n  };\n\n  const handleZoomSlider = e => {\n    setZoom(e.target.value);\n  };\n\n  const handleTrim = e => {\n    if (wavesurferObj) {\n      // get start and end points of the selected region\n      const region = wavesurferObj.regions.list[Object.keys(wavesurferObj.regions.list)[0]];\n\n      if (region) {\n        const start = region.start;\n        const end = region.end; // obtain the original array of the audio\n\n        const original_buffer = wavesurferObj.backend.buffer; // create a temporary new buffer array with the same length, sample rate and no of channels as the original audio\n\n        const new_buffer = wavesurferObj.backend.ac.createBuffer(original_buffer.numberOfChannels, original_buffer.length, original_buffer.sampleRate); // create 2 indices:\n        // left & right to the part to be trimmed\n\n        const first_list_index = start * original_buffer.sampleRate;\n        const second_list_index = end * original_buffer.sampleRate;\n        const second_list_mem_alloc = original_buffer.length - end * original_buffer.sampleRate; // create a new array upto the region to be trimmed\n\n        const new_list = new Float32Array(parseInt(first_list_index)); // create a new array of region after the trimmed region\n\n        const second_list = new Float32Array(parseInt(second_list_mem_alloc)); // create an array to combine the 2 parts\n\n        const combined = new Float32Array(original_buffer.length); // 2 channels: 1-right, 0-left\n        // copy the buffer values for the 2 regions from the original buffer\n        // for the region to the left of the trimmed section\n\n        original_buffer.copyFromChannel(new_list, 1);\n        original_buffer.copyFromChannel(new_list, 0); // for the region to the right of the trimmed section\n\n        original_buffer.copyFromChannel(second_list, 1, second_list_index);\n        original_buffer.copyFromChannel(second_list, 0, second_list_index); // create the combined buffer for the trimmed audio\n\n        combined.set(new_list);\n        combined.set(second_list, first_list_index); // copy the combined array to the new_buffer\n\n        new_buffer.copyToChannel(combined, 1);\n        new_buffer.copyToChannel(combined, 0); // load the new_buffer, to restart the wavesurfer's waveform display\n\n        wavesurferObj.loadDecodedBuffer(new_buffer);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"waveform-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: wavesurferRef,\n      id: \"waveform\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: timelineRef,\n      id: \"wave-timeline\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"all-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-container\",\n        children: [/*#__PURE__*/_jsxDEV(ToggleButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          title: \"play/pause\",\n          className: \"controls\",\n          onClick: handlePlayPause,\n          children: playing ? /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"material-icons\",\n            children: \"pause\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 8\n          }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"material-icons\",\n            children: \"play_arrow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          title: \"reload\",\n          className: \"controls\",\n          onClick: handleReload,\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"material-icons\",\n            children: \"replay\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"trim\",\n          onClick: handleTrim,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            style: {\n              fontSize: '1.2em',\n              color: 'white'\n            },\n            className: \"material-icons\",\n            children: \"content_cut\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 7\n          }, this), \"Trim\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"volume-slide-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"material-icons zoom-icon\",\n            children: \"remove_circle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"1\",\n            max: \"1000\",\n            value: zoom,\n            onChange: handleZoomSlider,\n            class: \"slider zoom-slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"material-icons zoom-icon\",\n            children: \"add_circle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"volume-slide-container\",\n          children: [volume > 0 ? /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"material-icons\",\n            children: \"volume_up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 8\n          }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"material-icons\",\n            children: \"volume_off\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"0\",\n            max: \"1\",\n            step: \"0.05\",\n            value: volume,\n            onChange: handleVolumeSlider,\n            className: \"slider volume-slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 3\n  }, this);\n};\n\n_s(AudioWaveform, \"8r2yYCWDbzr5f1uFa3OiOdLQ8ng=\");\n\n_c = AudioWaveform;\nexport default AudioWaveform;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioWaveform\");","map":{"version":3,"sources":["/Users/prerak/Developer/Git/GeetHub Main/editor/src/components/AudioWaveform.js"],"names":["React","useState","useEffect","useContext","useRef","TimelinePlugin","RegionsPlugin","FileContext","wavesurfer","ToggleButton","AudioWaveform","wavesurferRef","timelineRef","fileURL","setFileURL","wavesurferObj","setWavesurferObj","playing","setPlaying","volume","setVolume","zoom","setZoom","duration","setDuration","current","create","container","scrollParent","autoCenter","barWidth","cursorColor","loopSelection","waveColor","progressColor","responsive","plugins","load","on","play","enableDragSelection","Math","floor","getDuration","region","regions","list","keys","Object","length","remove","addRegion","start","end","color","handlePlayPause","e","playPause","handleReload","stop","handleVolumeSlider","target","value","handleZoomSlider","handleTrim","original_buffer","backend","buffer","new_buffer","ac","createBuffer","numberOfChannels","sampleRate","first_list_index","second_list_index","second_list_mem_alloc","new_list","Float32Array","parseInt","second_list","combined","copyFromChannel","set","copyToChannel","loadDecodedBuffer","fontSize"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, useRef } from 'react';\nimport TimelinePlugin from 'wavesurfer.js/dist/plugin/wavesurfer.timeline.min.js';\nimport RegionsPlugin from 'wavesurfer.js/dist/plugin/wavesurfer.regions.min.js';\nimport { FileContext } from '../contexts/fileContext';\nimport wavesurfer from 'wavesurfer.js';\nimport ToggleButton from './ToggleButton';\n\nconst AudioWaveform = () => {\n\tconst wavesurferRef = useRef(null);\n\tconst timelineRef = useRef(null);\n\n\t// fetch file url from the context\n\tconst { fileURL, setFileURL } = useContext(FileContext);\n\n\t// crate an instance of the wavesurfer\n\tconst [wavesurferObj, setWavesurferObj] = useState();\n\n\tconst [playing, setPlaying] = useState(true); // to keep track whether audio is currently playing or not\n\tconst [volume, setVolume] = useState(1); // to control volume level of the audio. 0-mute, 1-max\n\tconst [zoom, setZoom] = useState(1); // to control the zoom level of the waveform\n\tconst [duration, setDuration] = useState(0); // duration is used to set the default region of selection for trimming the audio\n\n\t// create the waveform inside the correct component\n\tuseEffect(() => {\n\t\tif (wavesurferRef.current && !wavesurferObj) {\n\t\t\tsetWavesurferObj(\n\t\t\t\twavesurfer.create({\n\t\t\t\t\tcontainer: '#waveform',\n\t\t\t\t\tscrollParent: true,\n\t\t\t\t\tautoCenter: true,\n\t\t\t\t\tbarWidth: 2,\n\t\t\t\t\tcursorColor: 'navy-blue',\n\t\t\t\t\tloopSelection: true,\n\t\t\t\t\twaveColor: '#C3E0E5',\n\t\t\t\t\tprogressColor: '#274472',\n\t\t\t\t\tresponsive: true,\n\t\t\t\t\tplugins: [\n\t\t\t\t\t\tTimelinePlugin.create({\n\t\t\t\t\t\t\tcontainer: '#wave-timeline',\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tRegionsPlugin.create({}),\n\t\t\t\t\t],\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}, [wavesurferRef, wavesurferObj]);\n\n\t// once the file URL is ready, load the file to produce the waveform\n\tuseEffect(() => {\n\t\tif (fileURL && wavesurferObj) {\n\t\t\twavesurferObj.load(fileURL);\n\t\t}\n\t}, [fileURL, wavesurferObj]);\n\n\tuseEffect(() => {\n\t\tif (wavesurferObj) {\n\t\t\t// once the waveform is ready, play the audio\n\t\t\twavesurferObj.on('ready', () => {\n\t\t\t\twavesurferObj.play();\n\t\t\t\twavesurferObj.enableDragSelection({}); // to select the region to be trimmed\n\t\t\t\tsetDuration(Math.floor(wavesurferObj.getDuration())); // set the duration in local state\n\t\t\t});\n\n\t\t\t// once audio starts playing, set the state variable to true\n\t\t\twavesurferObj.on('play', () => {\n\t\t\t\tsetPlaying(true);\n\t\t\t});\n\n\t\t\t// once audio starts playing, set the state variable to false\n\t\t\twavesurferObj.on('finish', () => {\n\t\t\t\tsetPlaying(false);\n\t\t\t});\n\n\t\t\t// if multiple regions are created, then remove all the previous regions so that only 1 is present at any given time\n\t\t\twavesurferObj.on('region-updated', (region) => {\n\t\t\t\tconst regions = region.wavesurfer.regions.list;\n\t\t\t\tconst keys = Object.keys(regions);\n\t\t\t\tif (keys.length > 1) {\n\t\t\t\t\tregions[keys[0]].remove();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, [wavesurferObj]);\n\n\t// set volume of the wavesurfer object, whenever volume variable in state is changed\n\tuseEffect(() => {\n\t\tif (wavesurferObj) wavesurferObj.setVolume(volume);\n\t}, [volume, wavesurferObj]);\n\n\t// set zoom level of the wavesurfer object, whenever the zoom variable in state is changed\n\tuseEffect(() => {\n\t\tif (wavesurferObj) wavesurferObj.zoom(zoom);\n\t}, [zoom, wavesurferObj]);\n\n\t// when the duration of the audio is available, set the length of the region depending on it, so as to not exceed the total lenght of the audio\n\tuseEffect(() => {\n\t\tif (duration && wavesurferObj) {\n\t\t\t// add a region with default length\n\t\t\twavesurferObj.addRegion({\n\t\t\t\tstart: Math.floor(duration / 2) - Math.floor(duration) / 5, // time in seconds\n\t\t\t\tend: Math.floor(duration / 2), // time in seconds\n\t\t\t\tcolor: 'hsla(217, 49%, 30%, 0.4)', // color of the selected region\n\t\t\t});\n\t\t}\n\t}, [duration, wavesurferObj]);\n\n\tconst handlePlayPause = (e) => {\n\t\twavesurferObj.playPause();\n\t\tsetPlaying(!playing);\n\t};\n\n\tconst handleReload = (e) => {\n\t\t// stop will return the audio to 0s, then play it again\n\t\twavesurferObj.stop();\n\t\twavesurferObj.play();\n\t\tsetPlaying(true); // to toggle the play/pause button icon\n\t};\n\n\tconst handleVolumeSlider = (e) => {\n\t\tsetVolume(e.target.value);\n\t};\n\n\tconst handleZoomSlider = (e) => {\n\t\tsetZoom(e.target.value);\n\t};\n\n\tconst handleTrim = (e) => {\n\t\tif (wavesurferObj) {\n\t\t\t// get start and end points of the selected region\n\t\t\tconst region =\n\t\t\t\twavesurferObj.regions.list[\n\t\t\t\t\tObject.keys(wavesurferObj.regions.list)[0]\n\t\t\t\t];\n\n\t\t\tif (region) {\n\t\t\t\tconst start = region.start;\n\t\t\t\tconst end = region.end;\n\n\t\t\t\t// obtain the original array of the audio\n\t\t\t\tconst original_buffer = wavesurferObj.backend.buffer;\n\n\t\t\t\t// create a temporary new buffer array with the same length, sample rate and no of channels as the original audio\n\t\t\t\tconst new_buffer = wavesurferObj.backend.ac.createBuffer(\n\t\t\t\t\toriginal_buffer.numberOfChannels,\n\t\t\t\t\toriginal_buffer.length,\n\t\t\t\t\toriginal_buffer.sampleRate\n\t\t\t\t);\n\n\t\t\t\t// create 2 indices:\n\t\t\t\t// left & right to the part to be trimmed\n\t\t\t\tconst first_list_index = start * original_buffer.sampleRate;\n\t\t\t\tconst second_list_index = end * original_buffer.sampleRate;\n\t\t\t\tconst second_list_mem_alloc =\n\t\t\t\t\toriginal_buffer.length - end * original_buffer.sampleRate;\n\n\t\t\t\t// create a new array upto the region to be trimmed\n\t\t\t\tconst new_list = new Float32Array(parseInt(first_list_index));\n\n\t\t\t\t// create a new array of region after the trimmed region\n\t\t\t\tconst second_list = new Float32Array(\n\t\t\t\t\tparseInt(second_list_mem_alloc)\n\t\t\t\t);\n\n\t\t\t\t// create an array to combine the 2 parts\n\t\t\t\tconst combined = new Float32Array(original_buffer.length);\n\n\t\t\t\t// 2 channels: 1-right, 0-left\n\t\t\t\t// copy the buffer values for the 2 regions from the original buffer\n\n\t\t\t\t// for the region to the left of the trimmed section\n\t\t\t\toriginal_buffer.copyFromChannel(new_list, 1);\n\t\t\t\toriginal_buffer.copyFromChannel(new_list, 0);\n\n\t\t\t\t// for the region to the right of the trimmed section\n\t\t\t\toriginal_buffer.copyFromChannel(\n\t\t\t\t\tsecond_list,\n\t\t\t\t\t1,\n\t\t\t\t\tsecond_list_index\n\t\t\t\t);\n\t\t\t\toriginal_buffer.copyFromChannel(\n\t\t\t\t\tsecond_list,\n\t\t\t\t\t0,\n\t\t\t\t\tsecond_list_index\n\t\t\t\t);\n\n\t\t\t\t// create the combined buffer for the trimmed audio\n\t\t\t\tcombined.set(new_list);\n\t\t\t\tcombined.set(second_list, first_list_index);\n\n\t\t\t\t// copy the combined array to the new_buffer\n\t\t\t\tnew_buffer.copyToChannel(combined, 1);\n\t\t\t\tnew_buffer.copyToChannel(combined, 0);\n\n\t\t\t\t// load the new_buffer, to restart the wavesurfer's waveform display\n\t\t\t\twavesurferObj.loadDecodedBuffer(new_buffer);\n\t\t\t}\n\t\t}\n\t};\n\n\treturn (\n\t\t<section className='waveform-container'>\n\t\t\t<div ref={wavesurferRef} id='waveform' />\n\t\t\t<div ref={timelineRef} id='wave-timeline' />\n\t\t\t<div className='all-controls'>\n\t\t\t\t<div className='left-container'>\n\t\t\t\t\t<ToggleButton />\n\t\t\t\t\t<button\n\t\t\t\t\t\ttitle='play/pause'\n\t\t\t\t\t\tclassName='controls'\n\t\t\t\t\t\tonClick={handlePlayPause}>\n\t\t\t\t\t\t{playing ? (\n\t\t\t\t\t\t\t<i className='material-icons'>pause</i>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<i className='material-icons'>play_arrow</i>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttitle='reload'\n\t\t\t\t\t\tclassName='controls'\n\t\t\t\t\t\tonClick={handleReload}>\n\t\t\t\t\t\t<i className='material-icons'>replay</i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className='trim' onClick={handleTrim}>\n\t\t\t\t\t\t<i\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tfontSize: '1.2em',\n\t\t\t\t\t\t\t\tcolor: 'white',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tclassName='material-icons'>\n\t\t\t\t\t\t\tcontent_cut\n\t\t\t\t\t\t</i>\n\t\t\t\t\t\tTrim\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div className='right-container'>\n\t\t\t\t\t<div className='volume-slide-container'>\n\t\t\t\t\t\t<i className='material-icons zoom-icon'>\n\t\t\t\t\t\t\tremove_circle\n\t\t\t\t\t\t</i>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype='range'\n\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\tmax='1000'\n\t\t\t\t\t\t\tvalue={zoom}\n\t\t\t\t\t\t\tonChange={handleZoomSlider}\n\t\t\t\t\t\t\tclass='slider zoom-slider'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<i className='material-icons zoom-icon'>add_circle</i>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='volume-slide-container'>\n\t\t\t\t\t\t{volume > 0 ? (\n\t\t\t\t\t\t\t<i className='material-icons'>volume_up</i>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<i className='material-icons'>volume_off</i>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype='range'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='1'\n\t\t\t\t\t\t\tstep='0.05'\n\t\t\t\t\t\t\tvalue={volume}\n\t\t\t\t\t\t\tonChange={handleVolumeSlider}\n\t\t\t\t\t\t\tclassName='slider volume-slider'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</section>\n\t);\n};\n\nexport default AudioWaveform;\n"]},"metadata":{},"sourceType":"module"}