[{"/Users/prerak/Developer/Git/GeetHub Main/editor/src/index.js":"1","/Users/prerak/Developer/Git/GeetHub Main/editor/src/App.js":"2","/Users/prerak/Developer/Git/GeetHub Main/editor/src/reportWebVitals.js":"3","/Users/prerak/Developer/Git/GeetHub Main/editor/src/contexts/fileContext.js":"4","/Users/prerak/Developer/Git/GeetHub Main/editor/src/components/Footer.js":"5","/Users/prerak/Developer/Git/GeetHub Main/editor/src/components/Navbar.js":"6","/Users/prerak/Developer/Git/GeetHub Main/editor/src/pages/EditPage.js":"7","/Users/prerak/Developer/Git/GeetHub Main/editor/src/pages/HomePage.js":"8","/Users/prerak/Developer/Git/GeetHub Main/editor/src/components/UploadAudio.js":"9","/Users/prerak/Developer/Git/GeetHub Main/editor/src/components/AudioWaveform.js":"10","/Users/prerak/Developer/Git/GeetHub Main/editor/src/components/ToggleButton.js":"11"},{"size":607,"mtime":1638674916000,"results":"12","hashOfConfig":"13"},{"size":507,"mtime":1638674916000,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1638674916000,"results":"15","hashOfConfig":"13"},{"size":348,"mtime":1638674916000,"results":"16","hashOfConfig":"13"},{"size":272,"mtime":1650708087313,"results":"17","hashOfConfig":"13"},{"size":343,"mtime":1650707631445,"results":"18","hashOfConfig":"13"},{"size":282,"mtime":1638674916000,"results":"19","hashOfConfig":"13"},{"size":214,"mtime":1638674916000,"results":"20","hashOfConfig":"13"},{"size":1164,"mtime":1650707216747,"results":"21","hashOfConfig":"13"},{"size":8183,"mtime":1650769007945,"results":"22","hashOfConfig":"13"},{"size":306,"mtime":1650705743287,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zsnyv9",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/prerak/Developer/Git/GeetHub Main/editor/src/index.js",[],"/Users/prerak/Developer/Git/GeetHub Main/editor/src/App.js",[],"/Users/prerak/Developer/Git/GeetHub Main/editor/src/reportWebVitals.js",[],"/Users/prerak/Developer/Git/GeetHub Main/editor/src/contexts/fileContext.js",[],"/Users/prerak/Developer/Git/GeetHub Main/editor/src/components/Footer.js",[],"/Users/prerak/Developer/Git/GeetHub Main/editor/src/components/Navbar.js",[],"/Users/prerak/Developer/Git/GeetHub Main/editor/src/pages/EditPage.js",[],"/Users/prerak/Developer/Git/GeetHub Main/editor/src/pages/HomePage.js",[],"/Users/prerak/Developer/Git/GeetHub Main/editor/src/components/UploadAudio.js",["48"],"import React, { useState, useEffect, useRef, useContext } from 'react';\nimport { FileContext } from '../contexts/fileContext';\nimport logo from '../assets/images/logo.png';\n\nconst UploadAudio = ({ history }) => {\n\tconst inputFile = useRef(null);\n\tconst { fileURL, setFileURL } = useContext(FileContext);\n\tconst [file, setFile] = useState(null);\n\n\tuseEffect(() => {\n\t\tif (file) {\n\t\t\tsetFileURL(file);\n\t\t\thistory.push('/edit');\n\t\t}\n\t}, [file, setFileURL, history]);\n\n\tconst handleButtonClick = () => {\n\t\tinputFile.current.click();\n\t};\n\n\tconst handleFileUpload = (e) => {\n\t\t// console.log(file);\n\t\tsetFile(URL.createObjectURL(e.target.files[0]));\n\t};\n\n\treturn (\n\t\t<div className='upload-audio'>\n\t\t\t<image src={logo} alt='logo' />\n\t\t\t<i\n\t\t\t\tstyle={{ color: '#274472' }}\n\t\t\t\tclassName='material-icons audio-icon'>\n\t\t\t\t\t\n\t\t\t\tlibrary_music\n\t\t\t</i>\n\t\t\t<h1>Upload your audio file here</h1>\n\t\t\t<button className='upload-btn' onClick={handleButtonClick}>\n\t\t\t\tUpload\n\t\t\t</button>\n\t\t\t<input\n\t\t\t\ttype='file'\n\t\t\t\tid='file'\n\t\t\t\tref={inputFile}\n\t\t\t\tstyle={{ display: 'none' }}\n\t\t\t\taccept='audio/*'\n\t\t\t\tonChange={handleFileUpload}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default UploadAudio;\n","/Users/prerak/Developer/Git/GeetHub Main/editor/src/components/AudioWaveform.js",["49"],"import React, { useState, useEffect, useContext, useRef } from 'react';\nimport TimelinePlugin from 'wavesurfer.js/dist/plugin/wavesurfer.timeline.min.js';\nimport RegionsPlugin from 'wavesurfer.js/dist/plugin/wavesurfer.regions.min.js';\nimport { FileContext } from '../contexts/fileContext';\nimport wavesurfer from 'wavesurfer.js';\nimport ToggleButton from './ToggleButton';\n\nconst AudioWaveform = () => {\n\tconst wavesurferRef = useRef(null);\n\tconst timelineRef = useRef(null);\n\n\t// fetch file url from the context\n\tconst { fileURL, setFileURL } = useContext(FileContext);\n\n\t// crate an instance of the wavesurfer\n\tconst [wavesurferObj, setWavesurferObj] = useState();\n\n\tconst [playing, setPlaying] = useState(true); // to keep track whether audio is currently playing or not\n\tconst [volume, setVolume] = useState(1); // to control volume level of the audio. 0-mute, 1-max\n\tconst [zoom, setZoom] = useState(1); // to control the zoom level of the waveform\n\tconst [duration, setDuration] = useState(0); // duration is used to set the default region of selection for trimming the audio\n\n\t// create the waveform inside the correct component\n\tuseEffect(() => {\n\t\tif (wavesurferRef.current && !wavesurferObj) {\n\t\t\tsetWavesurferObj(\n\t\t\t\twavesurfer.create({\n\t\t\t\t\tcontainer: '#waveform',\n\t\t\t\t\tscrollParent: true,\n\t\t\t\t\tautoCenter: true,\n\t\t\t\t\tbarWidth: 2,\n\t\t\t\t\tcursorColor: 'navy-blue',\n\t\t\t\t\tloopSelection: true,\n\t\t\t\t\twaveColor: '#C3E0E5',\n\t\t\t\t\tprogressColor: '#274472',\n\t\t\t\t\tresponsive: true,\n\t\t\t\t\tplugins: [\n\t\t\t\t\t\tTimelinePlugin.create({\n\t\t\t\t\t\t\tcontainer: '#wave-timeline',\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tRegionsPlugin.create({}),\n\t\t\t\t\t],\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}, [wavesurferRef, wavesurferObj]);\n\n\t// once the file URL is ready, load the file to produce the waveform\n\tuseEffect(() => {\n\t\tif (fileURL && wavesurferObj) {\n\t\t\twavesurferObj.load(fileURL);\n\t\t}\n\t}, [fileURL, wavesurferObj]);\n\n\tuseEffect(() => {\n\t\tif (wavesurferObj) {\n\t\t\t// once the waveform is ready, play the audio\n\t\t\twavesurferObj.on('ready', () => {\n\t\t\t\twavesurferObj.play();\n\t\t\t\twavesurferObj.enableDragSelection({}); // to select the region to be trimmed\n\t\t\t\tsetDuration(Math.floor(wavesurferObj.getDuration())); // set the duration in local state\n\t\t\t});\n\n\t\t\t// once audio starts playing, set the state variable to true\n\t\t\twavesurferObj.on('play', () => {\n\t\t\t\tsetPlaying(true);\n\t\t\t});\n\n\t\t\t// once audio starts playing, set the state variable to false\n\t\t\twavesurferObj.on('finish', () => {\n\t\t\t\tsetPlaying(false);\n\t\t\t});\n\n\t\t\t// if multiple regions are created, then remove all the previous regions so that only 1 is present at any given time\n\t\t\twavesurferObj.on('region-updated', (region) => {\n\t\t\t\tconst regions = region.wavesurfer.regions.list;\n\t\t\t\tconst keys = Object.keys(regions);\n\t\t\t\tif (keys.length > 1) {\n\t\t\t\t\tregions[keys[0]].remove();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, [wavesurferObj]);\n\n\t// set volume of the wavesurfer object, whenever volume variable in state is changed\n\tuseEffect(() => {\n\t\tif (wavesurferObj) wavesurferObj.setVolume(volume);\n\t}, [volume, wavesurferObj]);\n\n\t// set zoom level of the wavesurfer object, whenever the zoom variable in state is changed\n\tuseEffect(() => {\n\t\tif (wavesurferObj) wavesurferObj.zoom(zoom);\n\t}, [zoom, wavesurferObj]);\n\n\t// when the duration of the audio is available, set the length of the region depending on it, so as to not exceed the total lenght of the audio\n\tuseEffect(() => {\n\t\tif (duration && wavesurferObj) {\n\t\t\t// add a region with default length\n\t\t\twavesurferObj.addRegion({\n\t\t\t\tstart: Math.floor(duration / 2) - Math.floor(duration) / 5, // time in seconds\n\t\t\t\tend: Math.floor(duration / 2), // time in seconds\n\t\t\t\tcolor: 'hsla(217, 49%, 30%, 0.4)', // color of the selected region\n\t\t\t});\n\t\t}\n\t}, [duration, wavesurferObj]);\n\n\tconst handlePlayPause = (e) => {\n\t\twavesurferObj.playPause();\n\t\tsetPlaying(!playing);\n\t};\n\n\tconst handleReload = (e) => {\n\t\t// stop will return the audio to 0s, then play it again\n\t\twavesurferObj.stop();\n\t\twavesurferObj.play();\n\t\tsetPlaying(true); // to toggle the play/pause button icon\n\t};\n\n\tconst handleVolumeSlider = (e) => {\n\t\tsetVolume(e.target.value);\n\t};\n\n\tconst handleZoomSlider = (e) => {\n\t\tsetZoom(e.target.value);\n\t};\n\n\tconst handleTrim = (e) => {\n\t\tif (wavesurferObj) {\n\t\t\t// get start and end points of the selected region\n\t\t\tconst region =\n\t\t\t\twavesurferObj.regions.list[\n\t\t\t\t\tObject.keys(wavesurferObj.regions.list)[0]\n\t\t\t\t];\n\n\t\t\tif (region) {\n\t\t\t\tconst start = region.start;\n\t\t\t\tconst end = region.end;\n\n\t\t\t\t// obtain the original array of the audio\n\t\t\t\tconst original_buffer = wavesurferObj.backend.buffer;\n\n\t\t\t\t// create a temporary new buffer array with the same length, sample rate and no of channels as the original audio\n\t\t\t\tconst new_buffer = wavesurferObj.backend.ac.createBuffer(\n\t\t\t\t\toriginal_buffer.numberOfChannels,\n\t\t\t\t\toriginal_buffer.length,\n\t\t\t\t\toriginal_buffer.sampleRate\n\t\t\t\t);\n\n\t\t\t\t// create 2 indices:\n\t\t\t\t// left & right to the part to be trimmed\n\t\t\t\tconst first_list_index = start * original_buffer.sampleRate;\n\t\t\t\tconst second_list_index = end * original_buffer.sampleRate;\n\t\t\t\tconst second_list_mem_alloc =\n\t\t\t\t\toriginal_buffer.length - end * original_buffer.sampleRate;\n\n\t\t\t\t// create a new array upto the region to be trimmed\n\t\t\t\tconst new_list = new Float32Array(parseInt(first_list_index));\n\n\t\t\t\t// create a new array of region after the trimmed region\n\t\t\t\tconst second_list = new Float32Array(\n\t\t\t\t\tparseInt(second_list_mem_alloc)\n\t\t\t\t);\n\n\t\t\t\t// create an array to combine the 2 parts\n\t\t\t\tconst combined = new Float32Array(original_buffer.length);\n\n\t\t\t\t// 2 channels: 1-right, 0-left\n\t\t\t\t// copy the buffer values for the 2 regions from the original buffer\n\n\t\t\t\t// for the region to the left of the trimmed section\n\t\t\t\toriginal_buffer.copyFromChannel(new_list, 1);\n\t\t\t\toriginal_buffer.copyFromChannel(new_list, 0);\n\n\t\t\t\t// for the region to the right of the trimmed section\n\t\t\t\toriginal_buffer.copyFromChannel(\n\t\t\t\t\tsecond_list,\n\t\t\t\t\t1,\n\t\t\t\t\tsecond_list_index\n\t\t\t\t);\n\t\t\t\toriginal_buffer.copyFromChannel(\n\t\t\t\t\tsecond_list,\n\t\t\t\t\t0,\n\t\t\t\t\tsecond_list_index\n\t\t\t\t);\n\n\t\t\t\t// create the combined buffer for the trimmed audio\n\t\t\t\tcombined.set(new_list);\n\t\t\t\tcombined.set(second_list, first_list_index);\n\n\t\t\t\t// copy the combined array to the new_buffer\n\t\t\t\tnew_buffer.copyToChannel(combined, 1);\n\t\t\t\tnew_buffer.copyToChannel(combined, 0);\n\n\t\t\t\t// load the new_buffer, to restart the wavesurfer's waveform display\n\t\t\t\twavesurferObj.loadDecodedBuffer(new_buffer);\n\t\t\t}\n\t\t}\n\t};\n\n\treturn (\n\t\t<section className='waveform-container'>\n\t\t\t<div ref={wavesurferRef} id='waveform' />\n\t\t\t<div ref={timelineRef} id='wave-timeline' />\n\t\t\t<div className='all-controls'>\n\t\t\t\t<div className='left-container'>\n\t\t\t\t\t<ToggleButton />\n\t\t\t\t\t<button\n\t\t\t\t\t\ttitle='play/pause'\n\t\t\t\t\t\tclassName='controls'\n\t\t\t\t\t\tonClick={handlePlayPause}>\n\t\t\t\t\t\t{playing ? (\n\t\t\t\t\t\t\t<i className='material-icons'>pause</i>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<i className='material-icons'>play_arrow</i>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttitle='reload'\n\t\t\t\t\t\tclassName='controls'\n\t\t\t\t\t\tonClick={handleReload}>\n\t\t\t\t\t\t<i className='material-icons'>replay</i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className='trim' onClick={handleTrim}>\n\t\t\t\t\t\t<i\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tfontSize: '1.2em',\n\t\t\t\t\t\t\t\tcolor: 'white',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tclassName='material-icons'>\n\t\t\t\t\t\t\tcontent_cut\n\t\t\t\t\t\t</i>\n\t\t\t\t\t\tTrim\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div className='right-container'>\n\t\t\t\t\t<div className='volume-slide-container'>\n\t\t\t\t\t\t<i className='material-icons zoom-icon'>\n\t\t\t\t\t\t\tremove_circle\n\t\t\t\t\t\t</i>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype='range'\n\t\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\t\tmax='1000'\n\t\t\t\t\t\t\tvalue={zoom}\n\t\t\t\t\t\t\tonChange={handleZoomSlider}\n\t\t\t\t\t\t\tclass='slider zoom-slider'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<i className='material-icons zoom-icon'>add_circle</i>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='volume-slide-container'>\n\t\t\t\t\t\t{volume > 0 ? (\n\t\t\t\t\t\t\t<i className='material-icons'>volume_up</i>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<i className='material-icons'>volume_off</i>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype='range'\n\t\t\t\t\t\t\tmin='0'\n\t\t\t\t\t\t\tmax='1'\n\t\t\t\t\t\t\tstep='0.05'\n\t\t\t\t\t\t\tvalue={volume}\n\t\t\t\t\t\t\tonChange={handleVolumeSlider}\n\t\t\t\t\t\t\tclassName='slider volume-slider'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</section>\n\t);\n};\n\nexport default AudioWaveform;\n","/Users/prerak/Developer/Git/GeetHub Main/editor/src/components/ToggleButton.js",[],{"ruleId":"50","severity":1,"message":"51","line":7,"column":10,"nodeType":"52","messageId":"53","endLine":7,"endColumn":17},{"ruleId":"50","severity":1,"message":"54","line":13,"column":19,"nodeType":"52","messageId":"53","endLine":13,"endColumn":29},"no-unused-vars","'fileURL' is assigned a value but never used.","Identifier","unusedVar","'setFileURL' is assigned a value but never used."]